# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""GPU-accelerated similarity calculations between fingerprints.

This module provides GPU-accelerated implementations of common RDKit operations
found in the DataStructs module, including similarity calculations between fingerprints.
"""
import torch
from rdkit.DataStructs import ExplicitBitVect

from nvmolkit import _DataStructs
from nvmolkit._arrayHelpers import *  # noqa: F403
from nvmolkit.types import AsyncGpuResult

# --------------------------------
# Tanimoto similarity
# --------------------------------

def bulkTanimotoSimilarity(fingerprint_one: AsyncGpuResult | torch.Tensor | ExplicitBitVect,
                           fingerprint_group_two: AsyncGpuResult | torch.Tensor | list[ExplicitBitVect]) -> AsyncGpuResult | list[float]:
    """Returns the Tanimoto similarity between a fingerprint and a set of fingerprints.
    For optimal performance, the input fingerprints should be generated by nvMolKit, as there is significant overhead
    in data type conversion and copying to device when using RDKit fingerprints.

    Args:
        fingerprint_one: An RDKit ExplicitBitVect or a torch Tensor computed from nvMolKit fingerprints
        fingerprint_group_two: A list of RDKit ExplicitBitVects or a torch tensor computed from nvMolKit fingerprints

    Returns:
        An AsyncGpuResult object containing the Tanimoto similarities, with length equal to the number of 
        fingerprints in fingerprint_group_two. If fingerprint_one is an RDKit ExplicitBitVect, the return 
        type will be a list of floats.
    """
    if isinstance(fingerprint_one, ExplicitBitVect):
        return _DataStructs.BulkTanimotoSimilarity(fingerprint_one, fingerprint_group_two, backend='gpu')
    elif isinstance(fingerprint_one, torch.Tensor) or isinstance(fingerprint_one, AsyncGpuResult):
        return AsyncGpuResult(_DataStructs.BulkTanimotoSimilarityRawBuffers(fingerprint_one.__cuda_array_interface__,
                                                             fingerprint_group_two.__cuda_array_interface__))
    raise ValueError("Unsupported type for fingerprint_one")


def crossTanimotoSimilarity(fingerprint_group_one: AsyncGpuResult | torch.Tensor,
                            fingerprint_group_two: AsyncGpuResult | torch.Tensor | None = None) -> AsyncGpuResult:
    """Returns the Tanimoto similarity within a set of fingerprints or between two sets of fingerprints.

    Expects fingerprints to be generated by nvMolKit, with the leading dimension corresponding to
    the number of fingerprints, and the second dimension representing the packed fingerprint
    bitfield.

    Args:
        fingerprint_group_one: A torch Tensor or AsyncGpuResult computed from nvMolKit fingerprints
        fingerprint_group_two: A torch Tensor or AsyncGpuResult computed from nvMolKit fingerprints,
            or None for all-to-all similarity within fingerprint_group_one.

    Returns:
        An n x m matrix of Tanimoto similarities, with index [i, j] corresponding to the
        similarity between fingerprint i in fingerprint_group_one and fingerprint j in
        fingerprint_group_two. If fingerprint_group_two is None, computes all-to-all
        similarity within fingerprint_group_one.
    """
    bits_two_interface = fingerprint_group_two.__cuda_array_interface__ if fingerprint_group_two is not None else fingerprint_group_one.__cuda_array_interface__
    return AsyncGpuResult(_DataStructs.CrossTanimotoSimilarityRawBuffers(fingerprint_group_one.__cuda_array_interface__,
                                                          bits_two_interface))

# --------------------------------
# Cosine similarity
# --------------------------------

def bulkCosineSimilarity(fingerprint_one, fingerprint_group_two) -> AsyncGpuResult | list[float]:
    """Returns the Cosine similarity between a fingerprint and a set of fingerprints.

    For optimal performance, the input fingerprints should be generated by nvMolKit, as there is significant overhead
    in data type conversion and copying to device when using RDKit fingerprints.

    Args:
        fingerprint_one: An RDKit ExplicitBitVect or a torch Tensor computed from nvMolKit fingerprints
        fingerprint_group_two: A list of RDKit ExplicitBitVects or a torch tensor computed from nvMolKit fingerprints

    Returns:
        An AsyncGpuResult object containing the Cosine similarities, with length equal to the number of 
        fingerprints in fingerprint_group_two. If fingerprint_one is an RDKit ExplicitBitVect, the return 
        type will be a list of floats.
    """
    if isinstance(fingerprint_one, ExplicitBitVect):
        return _DataStructs.BulkCosineSimilarity(fingerprint_one, fingerprint_group_two, backend='gpu')
    elif isinstance(fingerprint_one, torch.Tensor) or (isinstance(fingerprint_one, AsyncGpuResult)):
        if  'cuda' !=  fingerprint_one.device.type or fingerprint_one.device  != fingerprint_group_two.device:
            raise ValueError("Both fingerprint_one and fingerprint_group_two should be on the same CUDA device")
        return AsyncGpuResult(_DataStructs.BulkCosineSimilarityRawBuffers(fingerprint_one.__cuda_array_interface__,
                                                             fingerprint_group_two.__cuda_array_interface__))

    raise ValueError("Unsupported type for fingerprint_one")


def crossCosineSimilarity(fingerprint_group_one, fingerprint_group_two = None) -> AsyncGpuResult:
    """Returns the Cosine similarity between two sets of fingerprints.

    Expects fingerprints to be generated by nvMolKit, with the leading dimension corresponding to
    the number of fingerprints, and the second dimension representing the packed fingerprint
    bitfield.

    Args:
        fingerprint_group_one: A torch Tensor computed from nvMolKit fingerprints
        fingerprint_group_two: A torch Tensor computed from nvMolKit fingerprints,
            or None for all-to-all similarity within fingerprint_group_one.

    Returns:
        An AsyncGpuResult object containing the Cosine similarities, with index [i, j] corresponding to the similarity between
        fingerprint i in fingerprint_group_one and fingerprint j in fingerprint_group_two.
    """
    if fingerprint_group_two is not None:
        return AsyncGpuResult(_DataStructs.CrossCosineSimilarityRawBuffers(fingerprint_group_one.__cuda_array_interface__,
                                                              fingerprint_group_two.__cuda_array_interface__))
    return AsyncGpuResult(_DataStructs.CrossCosineSimilarityRawBuffers(fingerprint_group_one.__cuda_array_interface__,
                                                          fingerprint_group_one.__cuda_array_interface__))
